// Autor: Johann Haeussler 21223}
// Microcontrolador: PIC16F887
// Laboratorio 7


// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = ON      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = ON        // L`ow Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)
// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits Write protection off)

#include <xc.h>
#include <stdint.h>


#define _XTAL_FREQ 8000000UL        // Se define la frecuencia del oscilador en Hz. En este caso, se utiliza una frecuencia de 8 MHz.
#define _tmr0_value 246            // Se define el valor del temporizador TMR0 para que sea cargado en cada interrupción.

uint8_t _tmr0_counter;             // Se define una variable global de tipo "uint8_t" (entero sin signo de 8 bits) llamada "_tmr0_counter".
uint8_t _led_pot;                  // Se define otra variable global de tipo "uint8_t" llamada "_led_pot". 

void setup(void);                  // Se declara la función "setup" sin argumentos y sin valor de retorno.

void __interrupt() isr(void)       // Se define la función de interrupción "__interrupt() isr()".
{
    if (T0IF)                      // Se comprueba si se ha producido una interrupción de temporizador (T0IF).
    {
        _tmr0_counter++;           // Se incrementa la variable "_tmr0_counter".
        INTCONbits.T0IF = 0;       // Se restablece el indicador de interrupción de temporizador (T0IF) a 0.
        TMR0 = _tmr0_value;        // Se restablece el valor del temporizador TMR0 al valor predefinido "_tmr0_value".
        PIR1bits.TMR1IF = 0;       // Se restablece el indicador de interrupción del temporizador 1 (TMR1IF) a 0.
       
    }



    if(PIR1bits.ADIF) //Verifica si la bandera de interrupción de conversión analógica a digital (ADIF) en el registro PIR1 está activa.
    {
        if(ADCON0bits.CHS == 0) //Verifica si el canal de entrada analógica seleccionado en el registro ADCON0 es igual a 0.
        {
            CCPR1L = (ADRESH>>1)+38; //Escribe el valor de la mitad superior del resultado de la conversión analógica a digital (ADRESH) en el registro de carga del ciclo de trabajo del PWM CCPR1L. Se añade 38 para ajustar el valor del ciclo de trabajo.
            CCP1CONbits.DC1B1 = ADRESH & 0b01; //Establece el bit DC1B1 del registro CCP1CON con el valor del bit menos significativo del resultado de la conversión analógica a digital (ADRESH).
            CCP1CONbits.DC1B0 = (ADRESL>>7); //Establece el bit DC1B0 del registro CCP1CON con el valor del bit más significativo del resultado de la conversión analógica a digital (ADRESL) desplazado a la derecha 7 posiciones.
        }
        else if (ADCON0bits.CHS == 1) //Si la condición anterior no se cumple, entonces se verifica si el canal de entrada analógica seleccionado en el registro ADCON0 es igual a 1.
        {
            CCPR2L = (ADRESH>>1)+38; //Escribe el valor de la mitad superior del resultado de la conversión analógica a digital (ADRESH) en el registro de carga del ciclo de trabajo del PWM CCPR2L. Se añade 38 para ajustar el valor del ciclo de trabajo.
            CCP2CONbits.DC2B1 = ADRESH & 0b01; //Establece el bit DC2B1 del registro CCP2CON con el valor del bit menos significativo del resultado de la conversión analógica a digital (ADRESH).
            CCP2CONbits.DC2B0 = (ADRESL>>7); //Establece el bit DC2B0 del registro CCP2CON con el valor del bit más significativo del resultado de la conversión analógica a digital (ADRESL) desplazado a la derecha 7 posiciones.          
        }
        else //Si ninguna de las condiciones anteriores se cumple, significa que se está usando otro canal de entrada analógica.
        {
            
        }
        PIR1bits.ADIF = 0; //Limpia la bandera de interrupción de conversión analógica a digital (ADIF) en el registro PIR1.
        return; //Sale de la función.
    }
}
void main (void)
{
    setup(); //Llama a la función setup para inicializar el microcontrolador.
    ADCON0bits.GO =1; //Inicia la conversión analógica a digital al poner en 1 el bit GO del registro ADCON0.
    while(1) //Bucle infinito para mantener al microcontrolador ejecutando esta parte del código continuamente.
    {

            if (ADCON0bits.GO == 0) //Verifica si la conversión analógica a digital ha terminado.
            {
                if (ADCON0bits.CHS == 0) //Verifica si el canal de entrada analógica seleccionado en el registro ADCON0 es igual a 0.
                {
                    ADCON0bits.CHS = 1; //Cambia el canal de entrada analógica seleccionado en el registro ADCON0 al canal 1.
                }
                else if (ADCON0bits.CHS == 1) //Si la condición anterior no se cumple, entonces se verifica si el canal de entrada analógica seleccionado en el registro ADCON0 es igual a 1.
                {
                    ADCON0bits.CHS = 2; //Cambia el canal de entrada analógica seleccionado en el registro ADCON0 al canal 2.
                }
                else //Si ninguna de las condiciones anteriores se cumple, significa que se está usando otro canal de entrada analógica.
                {
                    ADCON0bits.CHS = 0; //Cambia el canal de entrada analógica seleccionado en el registro ADCON0 al canal 0.
                }     
                __delay_us(50); //Espera 50 milisegundos para que la señal de entrada analógica se estabilice antes de iniciar la siguiente conversión.
                ADCON0bits.GO = 1; //Inicia la siguiente conversión analógica a digital al poner en 1 el bit GO del registro ADCON0.
            }
    }
}
void setup (void)
{
    ANSEL = 0b00000111; // Configurando los pines RA0, RA1 y RA2: PostLab, como entradas analógicas
    ANSELH = 0; // Configurando los pines RA4 a RA7 como entradas digitales
    
    TRISA = 0b00000111; // Configurando los pines RA0: PostLab, RA1 y RA2 como entradas
    TRISC = 0; // Configurando los pines del puerto C como salidas
    TRISD = 0; // Configurando los pines del puerto D como salidas
    
    // Configurando el reloj
    OSCCONbits.IRCF = 0b110; // Configurando la frecuencia interna del oscilador a 4MHz
    OSCCONbits.SCS = 1; // Usando el oscilador interno
    
    OPTION_REGbits. T0CS = 0; // Seleccionando el reloj interno para el temporizador 0
    OPTION_REGbits. T0SE = 0; // Configurando el temporizador 0 para que cuente flancos de bajada
    OPTION_REGbits. PSA = 0; // Habilitando el preescaler del temporizador 0
    OPTION_REGbits. PS2 = 1; // Configurando el preescaler a 1:128
    OPTION_REGbits. PS1 = 0;
    OPTION_REGbits. PS0 = 1;
    TMR0 = _tmr0_value; // Inicializando el valor del temporizador 0
    
    INTCONbits.T0IF = 0; // Limpiando la bandera de interrupción del temporizador 0
    
    // Configurando el ADC
    ADCON1bits.ADFM = 0; // Configurando el ADC para que los bits menos significativos se encuentren en ADRESL
    ADCON1bits.VCFG0 = 0; // Configurando el voltaje de referencia positivo en VDD
    ADCON1bits.VCFG1 = 0; // Configurando el voltaje de referencia negativo en VSS
    ADCON0bits.ADCS = 0b10; // Configurando la frecuencia del reloj del ADC en Fosc/32
    ADCON0bits.CHS = 0; // Seleccionando el canal 0 como entrada del ADC
    ADCON0bits.ADON = 1; // Habilitando el ADC
    __delay_us(50); // Esperando un tiempo para que se estabilice el ADC
    
    // Configurando el PWM
    //CCP1
    TRISCbits.TRISC2 = 1; // Configurando el pin CCP1 como entrada
    CCP1CONbits.P1M = 0; // Configurando el modo PWM en single output
    CCP1CONbits.CCP1M = 0b1100; // Configurando el modo PWM en Full-Bridge, Output Reversed
    
    CCPR1L = 0x0f; // Configurando el valor de CCPR1L para una frecuencia de PWM de 10kHz
    CCP1CONbits.DC1B = 0; // Configurando el valor del bit menos significativo del ciclo de trabajo en 0
    
	// CCP2
	TRISCbits.TRISC1 = 1;           // Configurar el pin RC1 como entrada
	CCP2CONbits.CCP2M = 0b1100;     // Configurar el CCP2 como modo PWM
	CCPR2L = 0x0f;                  // Valor de la señal PWM
	CCP2CONbits.DC2B1 = 0;          // Bit 1 del Duty Cycle

	// Configurando el TMR2 para el control del PWM
    
	PR2 = 255;                      // Valor de pre-carga del Timer2
	PIR1bits.TMR2IF = 0;            // Reiniciar la bandera de interrupción del Timer2
	T2CONbits.T2CKPS = 0b11;        // Configurar el prescaler del Timer2 a 1:64
	T2CONbits.TMR2ON = 1;           // Encender el Timer2

	while (PIR1bits.TMR2IF == 0);   // Esperar a que el Timer2 llegue al final del ciclo
	PIR1bits.TMR2IF = 0;            // Reiniciar la bandera de interrupción del Timer2

	// Configuración final del CCP2
	TRISCbits.TRISC2 = 0;           // Configurar el pin RC2 como salida
	TRISCbits.TRISC1 = 0;           // Configurar el pin RC1 como salida

	// Configuraciones de interrupción
	INTCONbits.GIE = 1;             // Habilitar las interrupciones globales
	INTCONbits.T0IE = 1;            // Habilitar la interrupción del Timer0
	INTCONbits.T0IF = 0;            // Reiniciar la bandera de interrupción del Timer0
	INTCONbits.PEIE = 1;            // Habilitar las interrupciones periféricas
	PIE1bits.ADIE = 1;              // Habilitar la interrupción del ADC
	PIR1bits.ADIF = 0;              // Reiniciar la bandera de interrupción del ADC

	return;                         // Terminar la función setup()
}
